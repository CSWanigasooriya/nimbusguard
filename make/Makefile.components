# Components Deployment Makefile
# Handles workload deployment, operator deployment, and KEDA scaling

.PHONY: deploy-workloads deploy-operator-only deploy-kubeflow-operator deploy-keda-scaling install-keda uninstall-keda deploy-traditional-scaling switch-to-kserve switch-to-local

# Colors for output
RED := \033[0;31m
GREEN := \033[0;32m
YELLOW := \033[0;33m
BLUE := \033[0;34m
NC := \033[0m # No Color

# =============================================================================
# Component Building
# =============================================================================

build-kubeflow: ## Build unified Kubeflow image for training and serving
	@echo "$(YELLOW)Building unified Kubeflow image...$(NC)"
	@docker build -t nimbusguard/kubeflow:latest \
		-f src/kubeflow/Dockerfile \
		--build-arg BASE_IMAGE=nimbusguard/base:latest \
		.
	@echo "$(GREEN)✅ Kubeflow image built successfully!$(NC)"

build-all-components: build-kubeflow ## Build all component images
	@echo "$(GREEN)✅ All component images built!$(NC)"

# =============================================================================
# Workload Deployment
# =============================================================================

deploy-workloads:
	@echo "$(BLUE)🚀 Deploying workload components...$(NC)"
	@kubectl apply -k kubernetes-manifests/components/base
	@echo "$(GREEN)✅ Workloads deployed!$(NC)"

# =============================================================================
# Kubeflow ML Components Deployment
# =============================================================================

deploy-kubeflow: ## Deploy Kubeflow components (Katib + KServe)
	@echo "$(BLUE)🚀 Deploying Kubeflow ML components...$(NC)"
	@kubectl apply -k kubernetes-manifests/components/kubeflow
	@echo "$(GREEN)✅ Kubeflow components deployed!$(NC)"

deploy-kubeflow-experiments: ## Deploy only Katib experiments
	@echo "$(BLUE)🧪 Deploying Kubeflow experiments...$(NC)"
	@kubectl apply -f kubernetes-manifests/components/kubeflow/katib-experiment.yaml
	@echo "$(GREEN)✅ Kubeflow experiments deployed!$(NC)"

deploy-kubeflow-serving: ## Deploy only KServe inference services
	@echo "$(BLUE)🤖 Deploying Kubeflow serving...$(NC)"
	@kubectl apply -f kubernetes-manifests/components/kubeflow/kserve-inference.yaml
	@echo "$(GREEN)✅ Kubeflow serving deployed!$(NC)"

check-kubeflow: ## Check Kubeflow component status
	@echo "$(BLUE)📋 Checking Kubeflow components...$(NC)"
	@echo "$(GREEN)Katib Experiments:$(NC)"
	@kubectl get experiments -A 2>/dev/null || echo "$(YELLOW)No Katib experiments found$(NC)"
	@echo "$(GREEN)KServe InferenceServices:$(NC)"
	@kubectl get inferenceservices -A 2>/dev/null || echo "$(YELLOW)No KServe services found$(NC)"

clean-kubeflow: ## Clean Kubeflow components
	@echo "$(RED)🗑️  Cleaning Kubeflow components...$(NC)"
	@kubectl delete -k kubernetes-manifests/components/kubeflow --ignore-not-found=true
	@echo "$(GREEN)✅ Kubeflow components cleaned!$(NC)"

# =============================================================================
# Operator Deployment
# =============================================================================

deploy-operator-only:
	@echo "$(BLUE)🤖 Deploying NimbusGuard operator...$(NC)"
	@PROJECT_DIR=$$(pwd); \
	DOCKER_DESKTOP_PATH="/tmp/nimbusguard-models"; \
	mkdir -p /tmp/nimbusguard-models; \
	sed "s|\$${NIMBUSGUARD_PROJECT_PATH}|$$DOCKER_DESKTOP_PATH|g" \
		kubernetes-manifests/components/operator/operator.yaml > \
		/tmp/nimbusguard-operator.yaml; \
	kubectl apply -f /tmp/nimbusguard-operator.yaml; \
	rm -f /tmp/nimbusguard-operator.yaml
	@echo "$(GREEN)✅ Operator deployed!$(NC)"

deploy-kubeflow-operator:
	@echo "$(BLUE)🤖 Deploying NimbusGuard operator with Kubeflow integration...$(NC)"
	@PROJECT_DIR=$$(pwd); \
	DOCKER_DESKTOP_PATH="/tmp/nimbusguard-models"; \
	mkdir -p /tmp/nimbusguard-models; \
	sed -e "s|\$${NIMBUSGUARD_PROJECT_PATH}|$$DOCKER_DESKTOP_PATH|g" \
	    -e "s|KSERVE_ENDPOINT: \"\"|KSERVE_ENDPOINT: \"http://nimbusguard-dqn-model.nimbusguard-serving.svc.cluster.local/v1/models/nimbusguard-dqn:predict\"|g" \
		kubernetes-manifests/components/operator/operator.yaml > \
		/tmp/nimbusguard-operator-kubeflow.yaml; \
	kubectl apply -f /tmp/nimbusguard-operator-kubeflow.yaml; \
	rm -f /tmp/nimbusguard-operator-kubeflow.yaml
	@echo "$(GREEN)✅ Kubeflow-integrated operator deployed!$(NC)"

# =============================================================================
# KEDA Auto-Scaling
# =============================================================================

install-keda:
	@echo "$(BLUE)🚀 Installing KEDA...$(NC)"
	@helm repo add kedacore https://kedacore.github.io/charts 2>/dev/null || true
	@helm repo update
	@echo "$(YELLOW)Using pre-existing KEDA namespace from base manifests$(NC)"
	@helm upgrade --install keda kedacore/keda \
		--version 2.17.1 \
		--namespace keda \
		--wait \
		--timeout 300s \
		--set installCRDs=true \
		--set operator.replicaCount=1 \
		--set metricsServer.replicaCount=1 \
		--set metricsServer.useHostNetwork=false \
		--set metricsServer.port=6443 \
		--set operator.grpcPort=9666 \
		--set certs.autoGenerate=true \
		--set certs.certDir=/certs \
		--set certs.certSecretName=kedaorg-certs \
		--set certs.caSecretName=kedaorg-ca \
		--force
	@echo "$(YELLOW)⏳ Waiting for KEDA to be ready...$(NC)"
	@kubectl wait --for=condition=ready pod -l app=keda-operator -n keda --timeout=300s || echo "$(YELLOW)⚠️  KEDA operator not ready yet$(NC)"
	@kubectl wait --for=condition=ready pod -l app=keda-operator-metrics-apiserver -n keda --timeout=300s || echo "$(YELLOW)⚠️  KEDA metrics server not ready yet$(NC)"
	@kubectl wait --for=condition=ready pod -l app=keda-admission-webhooks -n keda --timeout=300s || echo "$(YELLOW)⚠️  KEDA webhooks not ready yet$(NC)"
	@echo "$(GREEN)✅ KEDA installed successfully!$(NC)"

uninstall-keda:
	@echo "$(RED)🗑️  Uninstalling KEDA...$(NC)"
	@helm uninstall keda -n keda 2>/dev/null || true
	@kubectl delete namespace keda --ignore-not-found=true
	@kubectl delete apiservice v1beta1.external.metrics.k8s.io --ignore-not-found=true
	@kubectl delete crd scaledobjects.keda.sh --ignore-not-found=true
	@kubectl delete crd scaledjobs.keda.sh --ignore-not-found=true
	@kubectl delete crd triggerauthentications.keda.sh --ignore-not-found=true
	@kubectl delete crd clustertriggerauthentications.keda.sh --ignore-not-found=true
	@echo "$(YELLOW)⏳ Waiting for cleanup...$(NC)"
	@sleep 10
	@echo "$(GREEN)✅ KEDA uninstalled!$(NC)"

reinstall-keda: uninstall-keda install-keda

deploy-keda-scaling:
	@echo "$(BLUE)📈 Deploying KEDA scaling components...$(NC)"
	@kubectl apply -k kubernetes-manifests/components/keda
	@echo "$(GREEN)✅ KEDA scaling deployed!$(NC)"

# =============================================================================
# Scaling Component Selection
# =============================================================================

deploy-complete-stack:
	@echo "$(YELLOW)🎯 Choose NimbusGuard deployment stack:$(NC)"
	@echo "  1) Basic: Workloads only (no auto-scaling)"
	@echo "  2) Traditional: Workloads + KEDA (rule-based scaling)"
	@echo "  3) ML-Local: Workloads + Operator (local ML models)"
	@echo "  4) ML-Kubeflow: Workloads + Operator + Kubeflow (cloud-native ML)"
	@echo "  5) Full Stack: Workloads + KEDA + Operator + Kubeflow (everything - default)"
	@read -p "Enter choice [1-5, default 5]: " choice; \
	echo "$(BLUE)[COMPONENTS] Deploying workloads (always required)...$(NC)"; \
	$(MAKE) deploy-workloads; \
	if [ "$$choice" = "1" ]; then \
	  echo "$(BLUE)[SCALING] Basic deployment - no auto-scaling$(NC)"; \
	elif [ "$$choice" = "2" ]; then \
	  echo "$(BLUE)[SCALING] Traditional deployment - adding KEDA...$(NC)"; \
	  $(MAKE) install-keda; \
	  $(MAKE) deploy-keda-scaling; \
	elif [ "$$choice" = "3" ]; then \
	  echo "$(BLUE)[SCALING] ML-Local deployment - adding Operator...$(NC)"; \
	  $(MAKE) deploy-operator-only; \
	elif [ "$$choice" = "4" ]; then \
	  echo "$(BLUE)[SCALING] ML-Kubeflow deployment - adding Operator + Kubeflow...$(NC)"; \
	  $(MAKE) build-kubeflow; \
	  $(MAKE) deploy-kubeflow-operator; \
	  $(MAKE) deploy-kubeflow; \
	elif [ "$$choice" = "5" ] || [ -z "$$choice" ]; then \
	  echo "$(BLUE)[SCALING] Full Stack deployment - adding everything...$(NC)"; \
	  $(MAKE) install-keda; \
	  $(MAKE) build-kubeflow; \
	  $(MAKE) deploy-kubeflow-operator; \
	  $(MAKE) deploy-keda-scaling; \
	  $(MAKE) deploy-kubeflow; \
	else \
	  echo "$(RED)❌ Invalid choice. Exiting.$(NC)"; \
	  exit 1; \
	fi

# Legacy alias for backwards compatibility
deploy-traditional-scaling: deploy-complete-stack

# =============================================================================
# Component Status and Health Checks
# =============================================================================

check-workloads:
	@echo "$(BLUE)📋 Checking workload components...$(NC)"
	@echo "$(GREEN)Kafka:$(NC)"
	@kubectl get pods -n nimbusguard -l app=kafka || echo "$(YELLOW)Kafka not found$(NC)"
	@echo "$(GREEN)Consumer Workload:$(NC)"
	@kubectl get pods -n nimbusguard -l app=consumer-workload || echo "$(YELLOW)Consumer workload not found$(NC)"
	@echo "$(GREEN)Load Generator:$(NC)"
	@kubectl get pods -n nimbusguard -l app=load-generator || echo "$(YELLOW)Load generator not found$(NC)"

check-operator:
	@echo "$(BLUE)📋 Checking operator...$(NC)"
	@kubectl get pods -n nimbusguard -l app=nimbusguard-operator || echo "$(YELLOW)Operator not found$(NC)"
	@echo "$(GREEN)Operator logs (last 10 lines):$(NC)"
	@kubectl logs -n nimbusguard deployment/nimbusguard-operator --tail=10 2>/dev/null || echo "$(YELLOW)No operator logs available$(NC)"

check-keda:
	@echo "$(BLUE)📋 Checking KEDA...$(NC)"
	@kubectl get pods -n keda 2>/dev/null || echo "$(YELLOW)KEDA not installed$(NC)"
	@kubectl get scaledobjects -A 2>/dev/null || echo "$(YELLOW)No KEDA ScaledObjects found$(NC)"

check-all-components: check-workloads check-operator check-keda check-kubeflow ## Check all component status
	@echo "$(GREEN)✅ Component status check complete!$(NC)"

# =============================================================================
# Storage Components (MinIO)
# =============================================================================

deploy-minio: ## Deploy MinIO object storage
	@echo "$(BLUE)🗄️ Deploying MinIO object storage...$(NC)"
	@kubectl apply -k kubernetes-manifests/components/storage
	@echo "$(GREEN)✅ MinIO deployed! Waiting for pods to be ready...$(NC)"
	@kubectl wait --for=condition=ready pod -l app=minio -n minio --timeout=120s || true
	@echo "$(BLUE)📊 MinIO Console available at: http://localhost:9001$(NC)"
	@echo "$(YELLOW)💡 Credentials: nimbusguard / nimbusguard123$(NC)"

minio-status: ## Check MinIO deployment status
	@echo "$(BLUE)📊 MinIO Status:$(NC)"
	@kubectl get pods -l app=minio -n minio -o wide
	@echo ""
	@kubectl get svc -l app=minio -n minio
	@echo ""
	@echo "$(BLUE)🌐 Access URLs:$(NC)"
	@echo "  Console (Web UI): $(YELLOW)http://localhost:9001$(NC)"
	@echo "  API Endpoint:     $(YELLOW)http://localhost:9000$(NC)"
	@echo "  Credentials:      $(YELLOW)nimbusguard / nimbusguard123$(NC)"

upload-dataset: ## Upload training dataset to MinIO
	@echo "$(BLUE)📤 Uploading dataset to MinIO...$(NC)"
	@if [ ! -f "datasets/TrainData.csv" ]; then \
	  echo "$(RED)❌ Dataset not found! Please ensure datasets/TrainData.csv exists$(NC)"; \
	  exit 1; \
	fi
	@echo "$(YELLOW)Note: Upload will be handled by the training pipeline automatically$(NC)"
	@echo "$(YELLOW)Datasets are mounted directly into training pods via ConfigMaps$(NC)"
	@echo "$(GREEN)✅ Dataset ready for training! Use 'kubectl apply -f kubernetes-manifests/components/kubeflow/continuous-training.yaml' to start training$(NC)"

clean-minio: ## Clean MinIO deployment
	@echo "$(RED)🗑️  Cleaning MinIO...$(NC)"
	@kubectl delete -k kubernetes-manifests/components/storage --ignore-not-found=true
	@echo "$(GREEN)✅ MinIO cleaned!$(NC)"

# =============================================================================
# Component Cleanup
# =============================================================================

clean-workloads:
	@echo "$(RED)🗑️  Cleaning workload components...$(NC)"
	@kubectl delete -k kubernetes-manifests/components/base --ignore-not-found=true
	@echo "$(GREEN)✅ Workloads cleaned!$(NC)"

clean-operator:
	@echo "$(RED)🗑️  Cleaning operator...$(NC)"
	@kubectl delete deployment nimbusguard-operator -n nimbusguard --ignore-not-found=true
	@kubectl delete configmap nimbusguard-operator-config -n nimbusguard --ignore-not-found=true
	@kubectl delete service nimbusguard-operator -n nimbusguard --ignore-not-found=true
	@echo "$(GREEN)✅ Operator cleaned!$(NC)"

clean-keda-scaling:
	@echo "$(RED)🗑️  Cleaning KEDA scaling components...$(NC)"
	@kubectl delete -k kubernetes-manifests/components/keda --ignore-not-found=true
	@echo "$(GREEN)✅ KEDA scaling components cleaned!$(NC)"

clean-all-components: clean-kubeflow clean-keda-scaling clean-operator clean-workloads ## Clean all components
	@echo "$(GREEN)✅ All components cleaned!$(NC)"

# =============================================================================
# Development Helpers
# =============================================================================

restart-workloads:
	@echo "$(BLUE)🔄 Restarting workload components...$(NC)"
	@kubectl rollout restart deployment/kafka -n nimbusguard || true
	@kubectl rollout restart deployment/consumer-workload -n nimbusguard || true
	@kubectl rollout restart deployment/load-generator -n nimbusguard || true
	@echo "$(GREEN)✅ Workloads restarted!$(NC)"

restart-operator:
	@echo "$(BLUE)🔄 Restarting operator...$(NC)"
	@kubectl rollout restart deployment/nimbusguard-operator -n nimbusguard || true
	@echo "$(GREEN)✅ Operator restarted!$(NC)"

logs-operator:
	@echo "$(BLUE)📜 Following operator logs...$(NC)"
	@kubectl logs -f deployment/nimbusguard-operator -n nimbusguard

logs-workloads:
	@echo "$(BLUE)📜 Recent workload logs...$(NC)"
	@echo "$(GREEN)Consumer Workload:$(NC)"
	@kubectl logs deployment/consumer-workload -n nimbusguard --tail=10
	@echo "$(GREEN)Load Generator:$(NC)"
	@kubectl logs deployment/load-generator -n nimbusguard --tail=10

# =============================================================================
# Model Integration Switching
# =============================================================================

switch-to-kserve: ## Switch operator to use KServe for model inference
	@echo "$(BLUE)🔄 Switching to KServe model inference...$(NC)"
	@kubectl patch deployment nimbusguard-operator -n nimbusguard \
		--patch='{"spec":{"template":{"spec":{"containers":[{"name":"operator","env":[{"name":"MODEL_BACKEND","value":"kserve"},{"name":"KSERVE_ENDPOINT","value":"http://nimbusguard-dqn-model.nimbusguard-serving.svc.cluster.local/v1/models/nimbusguard-dqn:predict"}]}]}}}}' || true
	@kubectl rollout restart deployment/nimbusguard-operator -n nimbusguard
	@echo "$(GREEN)✅ Operator switched to KServe mode!$(NC)"

switch-to-local: ## Switch operator to use local models
	@echo "$(BLUE)🔄 Switching to local model inference...$(NC)"
	@kubectl patch deployment nimbusguard-operator -n nimbusguard \
		--patch='{"spec":{"template":{"spec":{"containers":[{"name":"operator","env":[{"name":"MODEL_BACKEND","value":"local"}]}]}}}}' || true
	@kubectl rollout restart deployment/nimbusguard-operator -n nimbusguard
	@echo "$(GREEN)✅ Operator switched to local model mode!$(NC)"
