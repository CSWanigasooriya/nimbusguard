# Infrastructure Setup Makefile
# Handles Docker builds, Kubernetes namespaces, secrets, and base infrastructure

.PHONY: setup-infrastructure build-images apply-base-manifests create-operator-secret prepare-local-models kubeflow-install kubeflow-build-images kubeflow-serving kubeflow-pipelines kubeflow-experiments kubeflow-status kubeflow-help clean-kubeflow-installation

# Colors for output
RED := \033[0;31m
GREEN := \033[0;32m
YELLOW := \033[0;33m
BLUE := \033[0;34m
NC := \033[0m # No Color

# =============================================================================
# Main Infrastructure Setup
# =============================================================================

setup-infrastructure: build-images apply-base-manifests create-operator-secret prepare-local-models
	@echo "$(GREEN)✅ Infrastructure setup complete!$(NC)"

# =============================================================================
# Docker Image Building
# =============================================================================

build-images:
	@echo "$(BLUE)🏗️  Building Docker images...$(NC)"
	@$(MAKE) build-base-image
	@$(MAKE) build-consumer-workload
	@$(MAKE) build-load-generator  
	@$(MAKE) build-operator
	@echo "$(GREEN)✅ All images built!$(NC)"

build-base-image:
	@echo "$(YELLOW)Building base image...$(NC)"
	@DOCKER_BUILDKIT=1 docker build \
		-t nimbusguard/base:latest \
		-f docker/base.Dockerfile .

build-consumer-workload:
	@echo "$(YELLOW)Building consumer workload image...$(NC)"
	@DOCKER_BUILDKIT=1 docker build \
		-t nimbusguard/consumer-workload:latest \
		-f src/consumer-workload/Dockerfile \
		src/consumer-workload

build-load-generator:
	@echo "$(YELLOW)Building load generator image...$(NC)"
	@DOCKER_BUILDKIT=1 docker build \
		-t nimbusguard/load-generator:latest \
		-f src/load-generator/Dockerfile \
		src/load-generator

build-operator:
	@echo "$(YELLOW)Building operator image...$(NC)"
	@DOCKER_BUILDKIT=1 docker build \
		-t nimbusguard/nimbusguard-operator:latest \
		-f src/nimbusguard-operator/Dockerfile \
		src/nimbusguard-operator

# =============================================================================
# Kubernetes Manifests
# =============================================================================

apply-base-manifests:
	@echo "$(BLUE)📋 Applying base Kubernetes manifests...$(NC)"
	@kubectl apply -k kubernetes-manifests/base

clean-base-manifests:
	@echo "$(RED)🗑️  Cleaning base manifests...$(NC)"
	@kubectl delete -k kubernetes-manifests/base --ignore-not-found=true

# =============================================================================
# Secrets and Configuration
# =============================================================================

create-operator-secret:
	@echo "$(BLUE)🔐 Creating operator secrets...$(NC)"
	@if ! kubectl get secret operator-secrets -n nimbusguard >/dev/null 2>&1; then \
		kubectl create secret generic operator-secrets \
			--from-literal=OPENAI_API_KEY="${OPENAI_API_KEY:-placeholder}" \
			--from-literal=LANGSMITH_API_KEY="${LANGSMITH_API_KEY:-placeholder}" \
			-n nimbusguard || echo "$(YELLOW)⚠️  Secret creation failed, may already exist$(NC)"; \
	else \
		echo "$(GREEN)✅ Operator secrets already exist$(NC)"; \
	fi

prepare-local-models:
	@echo "$(BLUE)📦 Preparing local model directory...$(NC)"
	@mkdir -p models/
	@echo "$(GREEN)✅ Model directory ready$(NC)"

# =============================================================================
# Status and Information
# =============================================================================

check-base-resources:
	@echo "$(BLUE)📋 Checking base Kubernetes resources...$(NC)"
	@echo "$(GREEN)Namespaces:$(NC)"
	@kubectl get namespaces | grep nimbusguard || echo "$(YELLOW)No NimbusGuard namespaces found$(NC)"
	@echo "$(GREEN)CRDs:$(NC)"
	@kubectl get crd | grep nimbusguard || echo "$(YELLOW)No NimbusGuard CRDs found$(NC)"
	@echo "$(GREEN)Secrets:$(NC)"
	@kubectl get secrets -n nimbusguard | grep operator-secrets || echo "$(YELLOW)No operator secrets found$(NC)"

# =============================================================================
# Kubeflow Infrastructure Setup
# =============================================================================

kubeflow-install: ## Install Kubeflow components (Katib, KServe, Pipelines)
	@echo "$(BLUE)🚀 Installing Kubeflow components...$(NC)"
	@echo "$(YELLOW)Installing Kubeflow Pipelines...$(NC)"
	@echo "$(YELLOW)  - Installing cluster-scoped resources...$(NC)"
	@kubectl apply --server-side --force-conflicts -k "https://github.com/kubeflow/pipelines/manifests/kustomize/cluster-scoped-resources?ref=1.8.5" --timeout=120s || \
		(echo "$(YELLOW)⚠️  Direct install failed, trying alternative method...$(NC)" && \
		 curl -L https://github.com/kubeflow/pipelines/archive/refs/tags/1.8.5.tar.gz | tar -xz && \
		 kubectl apply -k pipelines-1.8.5/manifests/kustomize/cluster-scoped-resources --timeout=120s && \
		 rm -rf pipelines-1.8.5)
	@kubectl wait --for condition=established --timeout=120s crd/applications.app.k8s.io || echo "$(YELLOW)⚠️  CRD may not be ready yet$(NC)"
	@echo "$(YELLOW)  - Installing platform-agnostic components...$(NC)"
	@kubectl apply --server-side --force-conflicts -k "https://github.com/kubeflow/pipelines/manifests/kustomize/env/platform-agnostic?ref=1.8.5" --timeout=120s || \
		(echo "$(YELLOW)⚠️  Direct install failed, trying alternative method...$(NC)" && \
		 test -d pipelines-1.8.5 || (curl -L https://github.com/kubeflow/pipelines/archive/refs/tags/1.8.5.tar.gz | tar -xz) && \
		 kubectl apply -k pipelines-1.8.5/manifests/kustomize/env/platform-agnostic --timeout=120s && \
		 rm -rf pipelines-1.8.5)
	@echo "$(YELLOW)Installing Katib...$(NC)"
	@kubectl apply --server-side --force-conflicts -k "https://github.com/kubeflow/katib/manifests/v1beta1/installs/katib-standalone?ref=v0.17.0" --timeout=120s || \
		(echo "$(YELLOW)⚠️  Direct install failed, trying alternative method...$(NC)" && \
		 curl -L https://github.com/kubeflow/katib/archive/refs/tags/v0.17.0.tar.gz | tar -xz && \
		 kubectl apply -k katib-0.17.0/manifests/v1beta1/installs/katib-standalone --timeout=120s && \
		 rm -rf katib-0.17.0)
	@echo "$(YELLOW)Installing cert-manager for KServe...$(NC)"
	@kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.11.0/cert-manager.yaml --timeout=120s
	@echo "$(YELLOW)Waiting for cert-manager webhook to be ready...$(NC)"
	@kubectl wait --for=condition=ready pod --all -n cert-manager --timeout=300s || echo "$(YELLOW)⚠️ cert-manager webhook not ready after 5 minutes.$(NC)"
	@echo "$(YELLOW)Waiting for cert-manager webhook to be fully operational...$(NC)"
	@sleep 60
	@kubectl wait --for=condition=available deployment/cert-manager-webhook -n cert-manager --timeout=300s || echo "$(YELLOW)⚠️ cert-manager webhook deployment not available.$(NC)"
	@echo "$(YELLOW)Installing KServe...$(NC)"
	@echo "$(YELLOW)Installing KServe with graceful error handling...$(NC)"
	@kubectl apply --server-side --force-conflicts -f "https://github.com/kserve/kserve/releases/download/v0.11.2/kserve.yaml" --timeout=120s || \
		(echo "$(YELLOW)⚠️  KServe installation encountered expected certificate issues, continuing...$(NC)" && \
		 echo "$(YELLOW)This is normal during initial setup - the webhook certificates will be configured automatically$(NC)")
	@echo "$(YELLOW)Waiting for KServe webhook to be ready...$(NC)"
	@kubectl wait --for=condition=ready pod -l control-plane=kserve-controller-manager -n kserve --timeout=300s || echo "$(YELLOW)⚠️ KServe webhook not ready after 5 minutes.$(NC)"
	@sleep 30
	@echo "$(YELLOW)Installing KServe runtimes...$(NC)"
	@kubectl apply --server-side --force-conflicts -f "https://github.com/kserve/kserve/releases/download/v0.11.2/kserve-runtimes.yaml" --timeout=120s || \
		(echo "$(YELLOW)⚠️  Failed to install KServe runtimes, retrying...$(NC)" && sleep 30 && \
		 kubectl apply --server-side --force-conflicts -f "https://github.com/kserve/kserve/releases/download/v0.11.2/kserve-runtimes.yaml" --timeout=120s) || \
		echo "$(YELLOW)⚠️  KServe runtimes installation failed, but continuing...$(NC)"
	@echo "$(GREEN)✅ KServe installation completed (certificate issues are expected and will resolve automatically)$(NC)"
	@echo "$(GREEN)✅ Kubeflow components installed!$(NC)"

kubeflow-build-images: ## Build Kubeflow-specific images
	@echo "$(BLUE)🏗️  Building Kubeflow images...$(NC)"
	@$(MAKE) build-kubeflow
	@echo "$(GREEN)✅ Kubeflow images built!$(NC)"

kubeflow-pipelines: ## Deploy training pipelines
	@echo "$(BLUE)🔄 Deploying Kubeflow training pipelines...$(NC)"
	@echo "$(YELLOW)Building pipeline images...$(NC)"
	@$(MAKE) build-kubeflow
	@echo "$(YELLOW)Deploying pipeline components...$(NC)"
	@kubectl apply -k kubernetes-manifests/components/kubeflow
	@echo "$(GREEN)✅ Training pipelines deployed!$(NC)"

kubeflow-experiments: ## Run hyperparameter tuning experiments
	@echo "$(BLUE)🧪 Starting Kubeflow experiments...$(NC)"
	@$(MAKE) deploy-kubeflow-experiments
	@echo "$(YELLOW)Waiting for experiments to start...$(NC)"
	@sleep 10
	@kubectl get experiments -n nimbusguard-experiments
	@echo "$(GREEN)✅ Experiments running! Check status with: kubectl get experiments -n nimbusguard-experiments$(NC)"

kubeflow-serving: ## Deploy model serving
	@echo "$(BLUE)🚀 Deploying Kubeflow model serving...$(NC)"
	@$(MAKE) deploy-kubeflow-serving
	@echo "$(YELLOW)Waiting for serving to be ready...$(NC)"
	@sleep 15
	@kubectl get inferenceservices -n nimbusguard-serving
	@echo "$(GREEN)✅ Model serving deployed!$(NC)"

kubeflow-status: ## Check Kubeflow component status
	@echo "$(BLUE)📋 Checking Kubeflow status...$(NC)"
	@echo "$(GREEN)Kubeflow Pipelines:$(NC)"
	@kubectl get pods -n kubeflow 2>/dev/null || echo "$(YELLOW)⚠️  Kubeflow not installed$(NC)"
	@echo "$(GREEN)Katib:$(NC)"
	@kubectl get pods -n kubeflow -l app=katib-controller 2>/dev/null || echo "$(YELLOW)⚠️  Katib not installed$(NC)"
	@echo "$(GREEN)KServe:$(NC)"
	@kubectl get pods -n kserve-system 2>/dev/null || echo "$(YELLOW)⚠️  KServe not installed$(NC)"
	@echo "$(GREEN)NimbusGuard ML Components:$(NC)"
	@kubectl get pods -n nimbusguard-ml 2>/dev/null || echo "$(YELLOW)⚠️  ML namespace not found$(NC)"
	@kubectl get inferenceservices -n nimbusguard-serving 2>/dev/null || echo "$(YELLOW)⚠️  No inference services found$(NC)"
	@kubectl get experiments -n nimbusguard-experiments 2>/dev/null || echo "$(YELLOW)⚠️  No experiments found$(NC)"

kubeflow-help: ## Show detailed Kubeflow commands
	@echo "$(BLUE)🎯 NimbusGuard Kubeflow Commands$(NC)"
	@echo ""
	@echo "$(GREEN)🚀 Setup & Installation:$(NC)"
	@echo "  $(YELLOW)kubeflow-install$(NC)      Install Kubeflow components (Pipelines, Katib, KServe)"
	@echo "  $(YELLOW)kubeflow-build-images$(NC) Build ML pipeline and serving images"
	@echo ""
	@echo "$(GREEN)🔬 ML Operations:$(NC)"
	@echo "  $(YELLOW)kubeflow-pipelines$(NC)    Deploy automated training pipelines"
	@echo "  $(YELLOW)kubeflow-experiments$(NC)  Start hyperparameter tuning with Katib"
	@echo "  $(YELLOW)kubeflow-serving$(NC)      Deploy production model serving with KServe"
	@echo ""
	@echo "$(GREEN)📊 Monitoring:$(NC)"
	@echo "  $(YELLOW)kubeflow-status$(NC)       Check all Kubeflow component status"
	@echo "  $(YELLOW)deploy-kubeflow$(NC)       Deploy/update Kubeflow components"
	@echo "  $(YELLOW)clean-kubeflow$(NC)        Clean up Kubeflow resources"
	@echo ""
	@echo "$(GREEN)🔧 Advanced:$(NC)"
	@echo "  $(YELLOW)deploy-kubeflow-operator$(NC)  Deploy operator with Kubeflow integration"
	@echo "  $(YELLOW)switch-to-kserve$(NC)      Switch operator to use KServe for inference"
	@echo "  $(YELLOW)switch-to-local$(NC)       Switch operator to use local models"
	@echo ""
	@echo "$(BLUE)💡 Quick Start:$(NC)"
	@echo "  $(GREEN)1.$(NC) Run: $(YELLOW)make kubeflow-install$(NC)"
	@echo "  $(GREEN)2.$(NC) Run: $(YELLOW)make kubeflow-pipelines$(NC)"
	@echo "  $(GREEN)3.$(NC) Run: $(YELLOW)make kubeflow-experiments$(NC)"
	@echo "  $(GREEN)4.$(NC) Run: $(YELLOW)make kubeflow-serving$(NC)"

# =============================================================================
# Kubeflow Cleanup
# =============================================================================

clean-kubeflow-installation: ## Clean up Kubeflow installation
	@echo "$(RED)🧹 Cleaning Kubeflow components...$(NC)"
	@echo "$(YELLOW)Cleaning Kubeflow Pipelines...$(NC)"
	@kubectl delete -k "https://github.com/kubeflow/pipelines/manifests/kustomize/env/platform-agnostic?ref=1.8.5" --ignore-not-found=true --timeout=120s || true
	@kubectl delete -k "https://github.com/kubeflow/pipelines/manifests/kustomize/cluster-scoped-resources?ref=1.8.5" --ignore-not-found=true --timeout=120s || true
	@echo "$(YELLOW)Cleaning Katib...$(NC)"
	@kubectl delete -k "https://github.com/kubeflow/katib/manifests/v1beta1/installs/katib-standalone?ref=v0.17.0" --ignore-not-found=true --timeout=120s || true
	@echo "$(YELLOW)Cleaning KServe...$(NC)"
	@kubectl delete -f "https://github.com/kserve/kserve/releases/download/v0.11.2/kserve-runtimes.yaml" --ignore-not-found=true --timeout=120s || true
	@kubectl delete -f "https://github.com/kserve/kserve/releases/download/v0.11.2/kserve.yaml" --ignore-not-found=true --timeout=120s || true
	@echo "$(GREEN)✅ Kubeflow components cleaned!$(NC)"

# =============================================================================
# Image Cleanup
# =============================================================================

clean-images:
	@echo "$(RED)🗑️  Cleaning Docker images...$(NC)"
	@docker rmi nimbusguard/base:latest nimbusguard/consumer-workload:latest nimbusguard/load-generator:latest nimbusguard/nimbusguard-operator:latest nimbusguard/kubeflow:latest --force 2>/dev/null || true
	@echo "$(GREEN)✅ Images cleaned!$(NC)"
