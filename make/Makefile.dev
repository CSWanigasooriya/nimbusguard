# Development Utilities Makefile
# Handles port forwarding, status checks, cleanup, and development helpers

.PHONY: forward stop-forward setup-port-forwarding wait-pods status clean clean-all clean-docker debug-info logs-all check-port-forward wait-core-pods wait-monitoring-pods status-core status-monitoring status-scaling status-kubeflow health-check health-check-endpoints health-check-metrics quick-test restart-all describe-failed-pods info fix-kustomize

# Colors for output
RED := \033[0;31m
GREEN := \033[0;32m
YELLOW := \033[0;33m
BLUE := \033[0;34m
NC := \033[0m # No Color

# =============================================================================
# Port Forwarding
# =============================================================================

forward: setup-port-forwarding

setup-port-forwarding:
	@echo "$(BLUE)üîÄ Setting up port forwarding for all services...$(NC)"
	@$(MAKE) stop-forward
	@kubectl port-forward -n nimbusguard svc/consumer-workload 8080:8080 > /dev/null 2>&1 & \
	kubectl port-forward -n nimbusguard svc/load-generator 8081:8081 > /dev/null 2>&1 & \
	kubectl port-forward -n nimbusguard svc/nimbusguard-operator 9080:9080 > /dev/null 2>&1 & \
	kubectl port-forward -n monitoring svc/prometheus 9090:9090 > /dev/null 2>&1 & \
	kubectl port-forward -n monitoring svc/grafana 3000:3000 > /dev/null 2>&1 & \
	sleep 2
	@echo "$(GREEN)   ‚úÖ Environment ready!$(NC)"
	@echo ""
	@echo "$(BLUE)   Services available at:$(NC)"
	@echo "$(GREEN)   üìä Consumer Workload: http://localhost:8080$(NC)"
	@echo "$(GREEN)   üöÄ Load Generator:    http://localhost:8081$(NC)"
	@echo "$(GREEN)   ü§ñ Operator:          http://localhost:9080$(NC)"
	@echo "$(GREEN)   üìà Prometheus:        http://localhost:9090$(NC)"
	@echo "$(GREEN)   üìä Grafana:           http://localhost:3000 (admin/admin)$(NC)"

stop-forward:
	@echo "$(RED)üõë Stopping port forwarding...$(NC)"
	@pkill -f "kubectl port-forward" || true
	@echo "$(GREEN)‚úÖ Port forwarding stopped$(NC)"

check-port-forward:
	@echo "$(BLUE)üîç Checking port forwarding status...$(NC)"
	@if pgrep -f "kubectl port-forward" > /dev/null; then \
		echo "$(GREEN)‚úÖ Port forwarding active$(NC)"; \
		echo "$(GREEN)   üìä Consumer Workload: http://localhost:8080$(NC)"; \
		echo "$(GREEN)   üöÄ Load Generator:    http://localhost:8081$(NC)"; \
		echo "$(GREEN)   ü§ñ Operator:          http://localhost:9080$(NC)"; \
		echo "$(GREEN)   üìà Prometheus:        http://localhost:9090$(NC)"; \
		echo "$(GREEN)   üìä Grafana:           http://localhost:3000$(NC)"; \
	else \
		echo "$(YELLOW)‚ö†Ô∏è  Port forwarding not active. Run 'make forward'$(NC)"; \
	fi

# =============================================================================
# Pod Readiness Checks
# =============================================================================

wait-pods:
	@echo "$(YELLOW)‚è≥ Waiting for pods to be ready...$(NC)"
	@echo "$(YELLOW)   (This may take a few minutes for first-time setup...)$(NC)"
	@$(MAKE) wait-core-pods
	@$(MAKE) wait-monitoring-pods

wait-core-pods:
	@echo "$(BLUE)Waiting for core pods...$(NC)"
	@kubectl wait --for=condition=ready pod -l app=kafka -n nimbusguard --timeout=300s || echo "$(YELLOW)‚ö†Ô∏è  Kafka not ready yet$(NC)"
	@kubectl wait --for=condition=ready pod -l app=consumer-workload -n nimbusguard --timeout=300s || echo "$(YELLOW)‚ö†Ô∏è  Consumer not ready yet$(NC)"
	@kubectl wait --for=condition=ready pod -l app=load-generator -n nimbusguard --timeout=300s || echo "$(YELLOW)‚ö†Ô∏è  Load generator not ready yet$(NC)"
	@kubectl wait --for=condition=ready pod -l app=nimbusguard-operator -n nimbusguard --timeout=300s || echo "$(YELLOW)‚ö†Ô∏è  Operator not ready yet$(NC)"

wait-monitoring-pods:
	@echo "$(BLUE)Waiting for monitoring pods...$(NC)"
	@kubectl wait --for=condition=ready pod -l app=prometheus -n monitoring --timeout=300s || echo "$(YELLOW)‚ö†Ô∏è  Prometheus not ready yet$(NC)"
	@kubectl wait --for=condition=ready pod -l app=grafana -n monitoring --timeout=300s || echo "$(YELLOW)‚ö†Ô∏è  Grafana not ready yet$(NC)"

# =============================================================================
# System Status
# =============================================================================

status:
	@echo "$(BLUE)=== NimbusGuard System Status ===$(NC)"
	@echo ""
	@$(MAKE) status-core
	@$(MAKE) status-monitoring
	@$(MAKE) status-scaling
	@$(MAKE) status-kubeflow
	@$(MAKE) check-port-forward

status-core:
	@echo "$(GREEN)Core Services:$(NC)"
	@kubectl get pods -n nimbusguard 2>/dev/null || echo "$(RED)‚ùå NimbusGuard namespace not found$(NC)"

status-monitoring:
	@echo ""
	@echo "$(GREEN)Monitoring:$(NC)"
	@kubectl get pods -n monitoring 2>/dev/null || echo "$(RED)‚ùå Monitoring namespace not found$(NC)"

status-scaling:
	@echo ""
	@echo "$(GREEN)KEDA (if installed):$(NC)"
	@kubectl get pods -n keda 2>/dev/null || echo "$(YELLOW)‚ö†Ô∏è  KEDA not installed$(NC)"

status-kubeflow:
	@echo ""
	@echo "$(GREEN)Kubeflow (if installed):$(NC)"
	@kubectl get pods -n kubeflow 2>/dev/null || echo "$(YELLOW)‚ö†Ô∏è  Kubeflow not installed$(NC)"
	@kubectl get pods -n nimbusguard-ml 2>/dev/null || echo "$(YELLOW)‚ö†Ô∏è  NimbusGuard ML namespace not found$(NC)"
	@kubectl get pods -n nimbusguard-serving 2>/dev/null || echo "$(YELLOW)‚ö†Ô∏è  NimbusGuard Serving namespace not found$(NC)"

# =============================================================================
# Health Checks
# =============================================================================

health-check:
	@echo "$(BLUE)üè• Running health checks...$(NC)"
	@$(MAKE) health-check-endpoints
	@$(MAKE) health-check-metrics

health-check-endpoints:
	@echo "$(GREEN)Endpoint Health:$(NC)"
	@curl -sf http://localhost:8080/health >/dev/null 2>&1 && echo "$(GREEN)‚úÖ Consumer Workload$(NC)" || echo "$(RED)‚ùå Consumer Workload$(NC)"
	@curl -sf http://localhost:8081/health >/dev/null 2>&1 && echo "$(GREEN)‚úÖ Load Generator$(NC)" || echo "$(RED)‚ùå Load Generator$(NC)"
	@curl -sf http://localhost:9080/health >/dev/null 2>&1 && echo "$(GREEN)‚úÖ Operator$(NC)" || echo "$(RED)‚ùå Operator$(NC)"
	@curl -sf http://localhost:9090/-/healthy >/dev/null 2>&1 && echo "$(GREEN)‚úÖ Prometheus$(NC)" || echo "$(RED)‚ùå Prometheus$(NC)"
	@curl -sf http://localhost:3000/api/health >/dev/null 2>&1 && echo "$(GREEN)‚úÖ Grafana$(NC)" || echo "$(RED)‚ùå Grafana$(NC)"

health-check-metrics:
	@echo "$(GREEN)Metrics Collection:$(NC)"
	@curl -s http://localhost:9090/api/v1/query?query=up | jq -r '.data.result | length' 2>/dev/null | \
	  awk '{if($$1>0) print "$(GREEN)‚úÖ Metrics targets: " $$1 "$(NC)"; else print "$(RED)‚ùå No metrics targets$(NC)"}' || \
	  echo "$(RED)‚ùå Cannot query metrics$(NC)"

# =============================================================================
# Dashboard Access
# =============================================================================

kubeflow-dashboard: ## Access Kubeflow Pipelines and Katib UIs
	@echo "$(BLUE)üéõÔ∏è Setting up Kubeflow Dashboard access...$(NC)"
	@echo "$(YELLOW)Checking for existing Kubeflow port forwards...$(NC)"
	@pkill -f "kubectl port-forward.*ml-pipeline-ui" || true
	@pkill -f "kubectl port-forward.*katib-ui" || true
	@sleep 2
	@echo "$(YELLOW)Setting up port forwarding to Kubeflow UIs...$(NC)"
	@kubectl port-forward svc/ml-pipeline-ui 8082:80 -n kubeflow > /dev/null 2>&1 &
	@kubectl port-forward svc/katib-ui 8083:80 -n kubeflow > /dev/null 2>&1 &
	@sleep 3
	@echo "$(GREEN)‚úÖ Kubeflow UIs available:$(NC)"
	@echo "  $(BLUE)Pipelines UI:$(NC) http://localhost:8082"
	@echo "  $(BLUE)Katib UI:$(NC)     http://localhost:8083/katib/"
	@echo ""
	@echo "$(BLUE)üí° Features available:$(NC)"
	@echo "  ‚Ä¢ $(BLUE)Pipelines (8082):$(NC) Create and manage ML workflows"
	@echo "  ‚Ä¢ $(BLUE)Katib (8083):$(NC)     Hyperparameter optimization experiments"
	@echo "  ‚Ä¢ View experiment results and metrics"
	@echo "  ‚Ä¢ Monitor training job progress"

minio-console: ## Open MinIO web console
	@echo "$(BLUE)üåê Setting up MinIO Console access...$(NC)"
	@echo "$(YELLOW)Checking for existing MinIO console port forward...$(NC)"
	@pkill -f "kubectl port-forward.*minio-console" || true
	@sleep 2
	@echo "$(YELLOW)Setting up port forwarding to MinIO Console...$(NC)"
	@kubectl port-forward svc/minio-console 9001:9001 -n minio > /dev/null 2>&1 &
	@sleep 3
	@echo "$(GREEN)‚úÖ MinIO Console available at: http://localhost:9001$(NC)"
	@echo "$(YELLOW)Credentials: nimbusguard / nimbusguard123$(NC)"
	@open http://localhost:9001 2>/dev/null || echo "$(YELLOW)Please visit: http://localhost:9001$(NC)"

dashboards: ## Access all dashboards (Kubeflow, MinIO, Grafana, Prometheus)
	@echo "$(BLUE)üéõÔ∏è Setting up all dashboard access...$(NC)"
	@$(MAKE) setup-port-forwarding
	@$(MAKE) kubeflow-dashboard
	@$(MAKE) minio-console
	@echo ""
	@echo "$(GREEN)üåê All Dashboards Ready:$(NC)"
	@echo "  $(BLUE)Kubeflow Pipelines:$(NC) http://localhost:8082"
	@echo "  $(BLUE)Kubeflow Katib:$(NC)     http://localhost:8083/katib/"
	@echo "  $(BLUE)MinIO Console:$(NC)      http://localhost:9001"
	@echo "  $(BLUE)Grafana:$(NC)            http://localhost:3000"
	@echo "  $(BLUE)Prometheus:$(NC)         http://localhost:9090"
	@echo "  $(BLUE)Consumer Workload:$(NC)  http://localhost:8080"
	@echo "  $(BLUE)Load Generator:$(NC)     http://localhost:8081"
	@echo "  $(BLUE)Operator:$(NC)           http://localhost:9080"

# =============================================================================
# Development Helpers
# =============================================================================

quick-test:
	@echo "$(BLUE)üß™ Running quick integration test...$(NC)"
	@echo "$(GREEN)Testing load generation...$(NC)"
	@curl -sf -X POST "http://localhost:8080/api/v1/workload/cpu/start" \
		-H "Content-Type: application/json" \
		-d '{"intensity": 30, "duration": 10}' >/dev/null 2>&1 && \
		echo "$(GREEN)‚úÖ Load generation works$(NC)" || echo "$(RED)‚ùå Load generation failed$(NC)"
	@echo "$(GREEN)Testing metrics...$(NC)"
	@sleep 5
	@curl -sf "http://localhost:9090/api/v1/query?query=nimbusguard_cpu_utilization" >/dev/null 2>&1 && \
		echo "$(GREEN)‚úÖ Metrics collection works$(NC)" || echo "$(RED)‚ùå Metrics collection failed$(NC)"

# =============================================================================
# Training Data Collection
# =============================================================================

collect-training-data: ## Collect comprehensive training data using load generator and system metrics
	@echo "$(BLUE)üìä Starting comprehensive training data collection...$(NC)"
	@echo "$(YELLOW)This will run various load patterns and collect system metrics$(NC)"
	@echo "$(YELLOW)Estimated duration: ~45 minutes$(NC)"
	@echo ""
	@echo "$(BLUE)Prerequisites:$(NC)"
	@echo "  ‚Ä¢ All services must be running (run 'make k8s-dev' first)"
	@echo "  ‚Ä¢ Port forwarding must be active"
	@echo ""
	@read -p "Continue? (y/N): " confirm && [ "$$confirm" = "y" ] || exit 1
	@echo ""
	@echo "$(GREEN)üöÄ Starting data collection...$(NC)"
	@cd scripts && python3 collect_training_data.py

collect-training-data-quick: ## Quick training data collection (shorter duration for testing)
	@echo "$(BLUE)üìä Starting quick training data collection...$(NC)"
	@echo "$(YELLOW)This is a shorter version for testing purposes$(NC)"
	@echo "$(YELLOW)Estimated duration: ~10 minutes$(NC)"
	@cd scripts && python3 -c "
import asyncio
import sys
sys.path.append('.')
from collect_training_data import TrainingDataCollector

class QuickCollector(TrainingDataCollector):
    def __init__(self):
        super().__init__()
        # Shorter load patterns for quick testing
        self.load_patterns = [
            {'name': 'low_test', 'pattern': 'constant', 'intensity': 20, 'duration': 60},
            {'name': 'high_test', 'pattern': 'constant', 'intensity': 80, 'duration': 60},
            {'name': 'spike_test', 'pattern': 'spike', 'intensity': 90, 'duration': 30},
        ]

async def main():
    collector = QuickCollector()
    await collector.collect_comprehensive_dataset()

asyncio.run(main())
"

restart-all:
	@echo "$(BLUE)üîÑ Restarting all components...$(NC)"
	@kubectl rollout restart deployment -n nimbusguard || true
	@kubectl rollout restart deployment -n monitoring || true
	@echo "$(GREEN)‚úÖ All components restarted!$(NC)"

# =============================================================================
# Cleanup
# =============================================================================

# Note: clean and clean-all targets are defined in the main Makefile

clean-docker:
	@echo "$(RED)üóëÔ∏è  Cleaning Docker images...$(NC)"
	@docker system prune -f
	@docker rmi $$(docker images | grep nimbusguard | awk '{print $$3}') 2>/dev/null || true
	@echo "$(GREEN)‚úÖ Docker cleanup completed!$(NC)"

# =============================================================================
# Troubleshooting
# =============================================================================

debug-info:
	@echo "$(BLUE)üîç Collecting debug information...$(NC)"
	@echo "$(GREEN)Kubernetes Version:$(NC)"
	@kubectl version --short 2>/dev/null || echo "$(RED)Cannot get Kubernetes version$(NC)"
	@echo ""
	@echo "$(GREEN)Cluster Info:$(NC)"
	@kubectl cluster-info 2>/dev/null || echo "$(RED)Cannot get cluster info$(NC)"
	@echo ""
	@echo "$(GREEN)Node Status:$(NC)"
	@kubectl get nodes 2>/dev/null || echo "$(RED)Cannot get node status$(NC)"
	@echo ""
	@echo "$(GREEN)Resource Usage:$(NC)"
	@kubectl top nodes 2>/dev/null || echo "$(RED)Metrics server not available$(NC)"

logs-all:
	@echo "$(BLUE)üìú Recent logs from all components...$(NC)"
	@echo "$(GREEN)=== Operator Logs ====$(NC)"
	@kubectl logs deployment/nimbusguard-operator -n nimbusguard --tail=10 2>/dev/null || echo "$(YELLOW)No operator logs$(NC)"
	@echo "$(GREEN)=== Consumer Workload Logs ====$(NC)"
	@kubectl logs deployment/consumer-workload -n nimbusguard --tail=10 2>/dev/null || echo "$(YELLOW)No consumer logs$(NC)"
	@echo "$(GREEN)=== Load Generator Logs ====$(NC)"
	@kubectl logs deployment/load-generator -n nimbusguard --tail=10 2>/dev/null || echo "$(YELLOW)No load generator logs$(NC)"
	@echo "$(GREEN)=== Prometheus Logs ====$(NC)"
	@kubectl logs deployment/prometheus -n monitoring --tail=10 2>/dev/null || echo "$(YELLOW)No Prometheus logs$(NC)"

describe-failed-pods:
	@echo "$(BLUE)üîç Describing failed pods...$(NC)"
	@kubectl get pods -A --field-selector=status.phase!=Running,status.phase!=Succeeded 2>/dev/null | \
	while read namespace name ready status restarts age; do \
		if [ "$$namespace" != "NAMESPACE" ]; then \
			echo "$(RED)Failed pod: $$namespace/$$name ($$status)$(NC)"; \
			kubectl describe pod $$name -n $$namespace 2>/dev/null | tail -10; \
			echo "---"; \
		fi; \
	done || echo "$(GREEN)‚úÖ No failed pods found$(NC)"

# =============================================================================
# Development Environment Info
# =============================================================================

info:
	@echo "$(BLUE)=== NimbusGuard Development Environment ===$(NC)"
	@echo ""
	@echo "$(GREEN)üöÄ Quick Start:$(NC)"
	@echo "  make k8s-dev         # Interactive setup with ML options"
	@echo ""
	@echo "$(GREEN)üîß Development:$(NC)"
	@echo "  make forward         # Setup port forwarding"
	@echo "  make status          # Check system health"
	@echo "  make quick-test      # Run integration test"
	@echo "  make health-check    # Check endpoint health"
	@echo ""
	@echo "$(GREEN)üßπ Cleanup:$(NC)"
	@echo "  make clean           # Clean NimbusGuard resources"
	@echo "  make clean-all       # Clean everything"
	@echo ""
	@echo "$(GREEN)üîç Troubleshooting:$(NC)"
	@echo "  make logs-all        # View recent logs"
	@echo "  make debug-info      # System information"
	@echo "  make describe-failed-pods  # Check failed pods"
