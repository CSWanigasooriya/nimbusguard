---
description:
globs:
alwaysApply: false
---
# Commit Conventions

This rule defines the commit conventions for the NimbusGuard project and emphasizes that commits should only be made when explicitly requested.

## Important Note
**DO NOT make any commits unless explicitly instructed to do so by the user.** This is a strict requirement to prevent unintended changes to the repository.

## Commit Message Format
When commits are requested, follow this conventional commit format:
```
<type>(<scope>): <description>

[optional body]

[optional footer(s)]
```

### Types
- `feat`: A new feature
- `fix`: A bug fix
- `docs`: Documentation only changes
- `style`: Changes that do not affect the meaning of the code
- `refactor`: A code change that neither fixes a bug nor adds a feature
- `perf`: A code change that improves performance
- `test`: Adding missing tests or correcting existing tests
- `chore`: Changes to the build process or auxiliary tools
- `ci`: Changes to CI configuration files and scripts

### Scopes
- `ai`: Changes to AI/ML components
- `infra`: Infrastructure and Kubernetes related changes
- `api`: API related changes
- `docs`: Documentation changes
- `test`: Test related changes
- `deps`: Dependency updates
- `ops`: Operational changes

### Examples
```
feat(ai): implement Q-learning agent for scaling decisions
fix(api): resolve memory leak in workload endpoint
docs(infra): update Kubernetes deployment guide
refactor(ai): optimize LSTM prediction pipeline
test(api): add integration tests for scaling endpoints
```

## Commit Process
1. Wait for explicit commit instruction from the user
2. Review changes to be committed
3. Format commit message according to conventions
4. Execute commit only after user approval

## Related Documentation
For more details about the project structure and components, refer to [README.md](mdc:README.md).
