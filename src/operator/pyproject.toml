[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "nimbusguard-operator"
version = "1.0.0"
description = "NimbusGuard Proactive Scaling Operator - Intelligent Kubernetes autoscaling with LSTM forecasting and DQN"
readme = "README.md"
license = { text = "MIT" }
authors = [
    { name = "Chamath Wanigasooriya", email = "chamathwanigasooriya@gmail.com" }
]
maintainers = [
    { name = "Chamath Wanigasooriya", email = "chamathwanigasooriya@gmail.com" }
]
keywords = [
    "kubernetes",
    "autoscaling",
    "machine-learning",
    "deep-q-network",
    "dqn",
    "lstm",
    "forecasting",
    "prometheus",
    "devops",
    "kopf",
    "langgraph"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Framework :: AsyncIO",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Clustering",
    "Topic :: System :: Monitoring",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
requires-python = ">=3.9"

# Core runtime dependencies
dependencies = [
    # Web framework and HTTP
    "aiohttp>=3.8.0",
    # Kubernetes operator framework
    "kopf>=1.37.0",
    "kubernetes>=28.1.0",
    # AI/ML frameworks
    "torch>=2.0.0",
    "numpy>=1.24.0",
    "scikit-learn>=1.3.0",
    "pandas>=2.0.0",
    # LangGraph for workflow orchestration
    "langgraph>=0.0.40",
    "langchain>=0.1.0",
    "langchain-core>=0.1.0",
    # Data processing and storage
    "minio>=7.1.0",
    "redis>=5.0.0",
    # Monitoring and metrics
    "prometheus-client>=0.17.0",
    # HTTP clients
    "httpx>=0.25.0",
    # Data science and utilities
    "joblib>=1.3.0",
    "pytz>=2023.3",
    "python-dateutil>=2.8.2",
    # Logging and configuration
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
    # Async utilities
    "asyncio-throttle>=1.0.2",
]

[project.optional-dependencies]
# Development dependencies
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "black>=23.7.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "pre-commit>=3.3.0",
]

# Production monitoring
monitoring = [
    "grafana-client>=3.5.0",
    "prometheus-api-client>=0.5.3",
]

# Enhanced ML features
ml-enhanced = [
    "optuna>=3.3.0",
    "tensorboard>=2.14.0",
    "wandb>=0.15.0",
]

[project.urls]
Homepage = "https://github.com/CSWanigasooriya/nimbusguard"
Repository = "https://github.com/CSWanigasooriya/nimbusguard"
Documentation = "https://github.com/CSWanigasooriya/nimbusguard/tree/main/src/operator"
"Bug Tracker" = "https://github.com/CSWanigasooriya/nimbusguard/issues"

[tool.setuptools.packages.find]
where = ["."]
include = ["*"]

[tool.setuptools.package-data]
"*" = ["*.gz", "*.parquet", "*.json", "*.yaml", "*.yml"]

[tool.black]
line-length = 100
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["."]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
] 