[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "dqn-adapter"
version = "1.0.0"
description = "NimbusGuard DQN Adapter - Intelligent Kubernetes autoscaling with Deep Q-Networks"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Chamath Wanigasooriya", email = "chamathwanigasooriya@gmail.com"}
]
maintainers = [
    {name = "Chamath Wanigasooriya", email = "chamathwanigasooriya@gmail.com"}
]
keywords = [
    "kubernetes", 
    "autoscaling", 
    "machine-learning", 
    "deep-q-network", 
    "dqn", 
    "prometheus", 
    "devops"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Framework :: AsyncIO",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Clustering",
    "Topic :: System :: Monitoring",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
requires-python = ">=3.9"

# Core runtime dependencies
dependencies = [
    # Web framework and HTTP
    "fastapi>=0.104.0",
    "uvicorn>=0.24.0",
    "aiohttp>=3.8.0",
    
    # AI and ML frameworks
    "langchain>=0.1.0",
    "langgraph>=0.0.40",
    "langchain-openai>=0.0.8",
    "langchain-mcp-adapters>=0.1.0",
    "torch>=2.0.0",
    "scikit-learn>=1.3.0",
    
    # Data processing
    "pandas>=2.0.0",
    "numpy>=1.24.0",
    "scipy>=1.10.0",
    "pyarrow>=12.0.0",
    
    # ML utilities
    "joblib>=1.3.0",
    
    # Kubernetes and infrastructure
    "kopf>=1.36.0",
    "kubernetes>=28.0.0",
    "prometheus-client>=0.18.0",
    
    # Storage and caching
    "redis>=5.0.0",
    "minio>=7.1.0",
    
    # Configuration and utilities
    "pydantic>=2.0.0",
    "python-dotenv>=1.0.0",
    "requests>=2.31.0",
    
    # Visualization (optional for research)
    "matplotlib>=3.7.0",
    "seaborn>=0.12.0",
    "plotly>=5.15.0",
]

[project.optional-dependencies]
# Development dependencies
dev = [
    # Testing framework
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.10.0",
    "pytest-cov>=4.0.0",
    "pytest-html>=3.1.0",
    "pytest-xdist>=3.0.0",  # Parallel test execution
    
    # Code quality and formatting
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "pylint>=2.17.0",
    "mypy>=1.0.0",
    "ruff>=0.1.0",  # Fast linter alternative
    
    # Type stubs
    "types-redis",
    "types-requests",
    "types-setuptools",
    
    # Pre-commit hooks
    "pre-commit>=3.0.0",
]

# Documentation dependencies
docs = [
    "sphinx>=6.0.0",
    "sphinx-rtd-theme>=1.2.0",
    "sphinx-autodoc-typehints>=1.20.0",
    "myst-parser>=2.0.0",  # Markdown support
]

# Development utilities
tools = [
    "ipython>=8.0.0",
    "jupyter>=1.0.0",
    "notebook>=7.0.0",
    "jupyterlab>=4.0.0",
]

# Performance profiling
profiling = [
    "py-spy>=0.3.0",
    "memory-profiler>=0.61.0",
    "line-profiler>=4.0.0",
]

# All development dependencies combined
all = [
    "dqn-adapter[dev,docs,tools,profiling]"
]

[project.urls]
Homepage = "https://github.com/CSWanigasooriya/nimbusguard"
Documentation = "https://github.com/CSWanigasooriya/nimbusguard/tree/main/docs"
Repository = "https://github.com/CSWanigasooriya/nimbusguard.git"
"Bug Tracker" = "https://github.com/CSWanigasooriya/nimbusguard/issues"

[project.scripts]
dqn-adapter = "main:main"

# Tool configurations
[tool.setuptools.packages.find]
where = ["."]
include = ["*"]
exclude = ["tests*", "*.tests*"]

[tool.black]
line-length = 100
target-version = ['py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.mypy_cache
  | \.pytest_cache
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
known_first_party = ["dqn_adapter"]
known_third_party = [
    "aiohttp",
    "fastapi",
    "kubernetes",
    "langchain",
    "numpy",
    "pandas",
    "prometheus_client",
    "pydantic",
    "pytest",
    "redis",
    "torch",
]
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "kopf.*",
    "minio.*",
    "langchain.*",
    "langgraph.*",
    "sklearn.*",
    "plotly.*",
    "seaborn.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=.",
    "--cov-report=html",
    "--cov-report=term-missing",
    "--cov-fail-under=80",
    "--asyncio-mode=auto",
]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "performance: marks tests as performance tests",
    "asyncio: marks tests as asyncio tests",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

[tool.coverage.run]
source = ["."]
omit = [
    "tests/*",
    "*/tests/*",
    "test_*",
    "setup.py",
    "*/site-packages/*",
    ".venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.ruff]
target-version = "py39"
line-length = 100
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["B011"]

[tool.pylint.messages_control]
disable = [
    "C0103",  # Invalid name
    "C0114",  # Missing module docstring
    "C0115",  # Missing class docstring
    "C0116",  # Missing function docstring
    "R0903",  # Too few public methods
    "R0913",  # Too many arguments
    "W0212",  # Access to a protected member
]

[tool.pylint.format]
max-line-length = 100 